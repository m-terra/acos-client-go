// Code generated by MockGen. DO NOT EDIT.
// Source: utils/http.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/ureuzy/acos-client-go/utils"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// AddHeader mocks base method.
func (m *MockHTTPClient) AddHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHeader", key, value)
}

// AddHeader indicates an expected call of AddHeader.
func (mr *MockHTTPClientMockRecorder) AddHeader(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeader", reflect.TypeOf((*MockHTTPClient)(nil).AddHeader), key, value)
}

// DELETE mocks base method.
func (m *MockHTTPClient) DELETE(path string) (*utils.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DELETE", path)
	ret0, _ := ret[0].(*utils.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DELETE indicates an expected call of DELETE.
func (mr *MockHTTPClientMockRecorder) DELETE(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockHTTPClient)(nil).DELETE), path)
}

// GET mocks base method.
func (m *MockHTTPClient) GET(path string) (*utils.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", path)
	ret0, _ := ret[0].(*utils.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GET indicates an expected call of GET.
func (mr *MockHTTPClientMockRecorder) GET(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHTTPClient)(nil).GET), path)
}

// POST mocks base method.
func (m *MockHTTPClient) POST(path string, body interface{}) (*utils.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", path, body)
	ret0, _ := ret[0].(*utils.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// POST indicates an expected call of POST.
func (mr *MockHTTPClientMockRecorder) POST(path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockHTTPClient)(nil).POST), path, body)
}

// PUT mocks base method.
func (m *MockHTTPClient) PUT(path string, body interface{}) (*utils.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUT", path, body)
	ret0, _ := ret[0].(*utils.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PUT indicates an expected call of PUT.
func (mr *MockHTTPClientMockRecorder) PUT(path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockHTTPClient)(nil).PUT), path, body)
}

// RemoveHeader mocks base method.
func (m *MockHTTPClient) RemoveHeader(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHeader", key)
}

// RemoveHeader indicates an expected call of RemoveHeader.
func (mr *MockHTTPClientMockRecorder) RemoveHeader(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHeader", reflect.TypeOf((*MockHTTPClient)(nil).RemoveHeader), key)
}
